#!/usr/bin/env python3
"""
Script chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ file system sang MongoDB GridFS
Ch·∫°y script n√†y khi mu·ªën migrate t·ª´ h·ªá th·ªëng c≈© sang h·ªá th·ªëng m·ªõi
"""

import os
import sys
from datetime import datetime
from bson import ObjectId
from pymongo import MongoClient
import gridfs
from PIL import Image
from io import BytesIO
import PyPDF2
import docx

UPLOADS_DIR = "uploads"   # th∆∞ m·ª•c ch·ª©a s√°ch c≈©
COVERS_DIR = "covers"     # th∆∞ m·ª•c ch·ª©a b√¨a c≈©


def connect_mongodb():
    """K·∫øt n·ªëi MongoDB"""
    try:
        client = MongoClient('mongodb://localhost:27017/')
        client.admin.command('ping')
        print("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng")

        db = client['digital_library']
        fs = gridfs.GridFS(db)
        fs_images = gridfs.GridFS(db, collection="images")

        return db, fs, fs_images
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi MongoDB: {e}")
        return None, None, None


def extract_text_preview(file_path, max_chars=500):
    """Tr√≠ch xu·∫•t text preview t·ª´ file"""
    try:
        file_ext = file_path.lower().split('.')[-1]

        if file_ext == 'pdf':
            with open(file_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                text = ""
                for page_num in range(min(3, len(reader.pages))):
                    text += reader.pages[page_num].extract_text() or ""
                return text[:max_chars] + "..." if len(text) > max_chars else text

        elif file_ext in ['doc', 'docx']:
            doc = docx.Document(file_path)
            text = ""
            for paragraph in doc.paragraphs[:10]:
                text += paragraph.text + "\n"
            return text[:max_chars] + "..." if len(text) > max_chars else text

        elif file_ext == 'txt':
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                content = file.read()
                return content[:max_chars] + "..." if len(content) > max_chars else content

        return "Kh√¥ng th·ªÉ t·∫°o preview cho ƒë·ªãnh d·∫°ng n√†y."

    except Exception as e:
        print(f"L·ªói tr√≠ch xu·∫•t text t·ª´ {file_path}: {e}")
        return "L·ªói tr√≠ch xu·∫•t n·ªôi dung."


def generate_thumbnail(image_path):
    """T·∫°o thumbnail t·ª´ ·∫£nh"""
    try:
        img = Image.open(image_path)
        img.thumbnail((300, 400), Image.Resampling.LANCZOS)

        thumb_io = BytesIO()
        img.save(thumb_io, format='JPEG', quality=85)
        thumb_io.seek(0)
        return thumb_io
    except Exception as e:
        print(f"L·ªói t·∫°o thumbnail t·ª´ {image_path}: {e}")
        return None


# --- C√°c h√†m migrate/cleanup/verify ---


def migrate_books_to_gridfs(db, fs, fs_images):
    """Di chuy·ªÉn d·ªØ li·ªáu s√°ch v√† b√¨a t·ª´ filesystem sang GridFS"""
    books = list(db.books.find({"$or": [{"file_path": {"$exists": True}}, {"cover_image": {"$exists": True}}]}))
    print(f"üìö T√¨m th·∫•y {len(books)} s√°ch c·∫ßn migrate")

    for book in books:
        updates = {}

        # --- migrate file ch√≠nh ---
        if "file_path" in book and os.path.exists(book["file_path"]):
            file_path = book["file_path"]
            try:
                with open(file_path, "rb") as f:
                    file_id = fs.put(f, filename=os.path.basename(file_path))
                updates["file_id"] = file_id
                updates["preview_text"] = extract_text_preview(file_path)
                print(f"   ‚úÖ ƒê√£ migrate file cho s√°ch '{book.get('title')}'")

            except Exception as e:
                print(f"   ‚ùå L·ªói migrate file {file_path}: {e}")

        # --- migrate ·∫£nh b√¨a ---
        if "cover_image" in book and os.path.exists(book["cover_image"]):
            image_path = book["cover_image"]
            try:
                with open(image_path, "rb") as f:
                    cover_id = fs_images.put(f, filename=os.path.basename(image_path))
                updates["cover_id"] = cover_id
                print(f"   üé® ƒê√£ migrate b√¨a cho s√°ch '{book.get('title')}'")
            except Exception as e:
                print(f"   ‚ùå L·ªói migrate b√¨a {image_path}: {e}")

        # --- c·∫≠p nh·∫≠t document ---
        if updates:
            db.books.update_one({"_id": book["_id"]}, {"$set": updates})


def verify_migration(db, fs, fs_images):
    """X√°c minh d·ªØ li·ªáu ƒë√£ migrate th√†nh c√¥ng"""
    migrated_books = list(db.books.find({"file_id": {"$exists": True}}))
    print(f"üîç C√≥ {len(migrated_books)} s√°ch ƒë√£ c√≥ file_id trong GridFS")

    # Ki·ªÉm tra GridFS th·ª±c s·ª± ch·ª©a file
    for book in migrated_books[:5]:  # ki·ªÉm tra m·∫´u 5 s√°ch
        try:
            file_id = book["file_id"]
            fs.get(file_id)  # th·ª≠ l·∫•y file
            print(f"   ‚úÖ File GridFS t·ªìn t·∫°i cho s√°ch '{book.get('title')}'")
        except Exception as e:
            print(f"   ‚ùå L·ªói khi ki·ªÉm tra file GridFS cho s√°ch {book.get('_id')}: {e}")


def cleanup_old_files(db):
    """D·ªçn d·∫πp ƒë∆∞·ªùng d·∫´n file_path v√† cover_image c≈©"""
    result = db.books.update_many({}, {"$unset": {"file_path": "", "cover_image": ""}})
    print(f"üßπ ƒê√£ d·ªçn {result.modified_count} record, x√≥a field file_path v√† cover_image")


# --- main ---


def main():
    print("üöÄ MongoDB GridFS Migration Tool")
    print("=" * 50)

    # K·∫øt n·ªëi database
    db, fs, fs_images = connect_mongodb()
    if db is None:
        sys.exit(1)

    try:
        # Th·ª±c hi·ªán migration
        migrate_books_to_gridfs(db, fs, fs_images)

        # Ki·ªÉm tra t√≠nh to√†n v·∫πn
        verify_migration(db, fs, fs_images)

        # T√πy ch·ªçn d·ªçn d·∫πp
        cleanup_old_files(db)

        print("\nüéâ Ho√†n th√†nh migration!")
        print("üí° ·ª®ng d·ª•ng b√¢y gi·ªù ƒë√£ t∆∞∆°ng th√≠ch v·ªõi GridFS (app.py)")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Migration b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")


if __name__ == "__main__":
    main()
